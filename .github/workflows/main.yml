name: Build & Deployment

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}

    steps:
      # Checkout the repo
      - uses: actions/checkout@v2

      # Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build and push Docker Image
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Preset Image Name
        run: echo "IMAGE_URL=$(echo ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:$(echo ${{ github.sha }} | cut -c1-7) | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_URL }}
          build-args: |
            APP_KEYS=${{ secrets.APP_KEYS }}
            API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT }}
            ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}
            TRANSFER_TOKEN_SALT=${{ secrets.TRANSFER_TOKEN_SALT }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            CLOUDINARY_KEY=${{ secrets.CLOUDINARY_KEY }}
            CLOUDINARY_SECRET=${{ secrets.CLOUDINARY_SECRET }}
            DATABASE_CLIENT=${{ vars.DATABASE_CLIENT }}
            DATABASE_HOST=${{ vars.DATABASE_HOST }}
            DATABASE_PORT=${{ vars.DATABASE_PORT }}
            DATABASE_NAME=${{ vars.DATABASE_NAME }}
            DATABASE_USERNAME=${{ vars.DATABASE_USERNAME }}
            CLOUDINARY_NAME=${{ vars.CLOUDINARY_NAME }}

      # Deploy to CapRover
      - name: Deploy Image to CapRover
        uses: caprover/deploy-from-github@v1.1.2
        with:
          server: "${{ vars.CAPROVER_SERVER }}"
          app: "${{ vars.APP_NAME }}"
          token: "${{ secrets.APP_TOKEN }}"
          image: ${{ env.IMAGE_URL }}
